//+------------------------------------------------------------------+
//|                                                      BreakerBlock |
//|                        Copyright 2024, MetaQuotes Software Corp. |
//|                        Desenvolvido por: Seu Nome                |
//+------------------------------------------------------------------+
#property strict

// Parâmetros de entrada
input int Periodos_Pivots = 5;         // Períodos para identificar pivots
input int LookBackBars = 100;          // Barras para verificar as quebras de estrutura
input double BreakerBlockRange = 10;   // Distância em pips para identificar a zona de Breaker Block

// Variáveis globais para Breaker Block
double breakerBlockHigh = 0;
double breakerBlockLow = 0;
bool isBullishBreaker = false;
bool isBearishBreaker = false;
double pointSize = 0;  // Variável para armazenar o valor do ponto

//+------------------------------------------------------------------+
//| Função para inicializar o tamanho do ponto (Point)                |
//+------------------------------------------------------------------+
void OnInit() {
    pointSize = SymbolInfoDouble(_Symbol, SYMBOL_POINT);
}

//+------------------------------------------------------------------+
//| Função para calcular o pivô mais alto                            |
//+------------------------------------------------------------------+
double GetHighestHigh(int periodos) {
    int index = iHighest(NULL, 0, MODE_HIGH, periodos, 0);
    return iHigh(NULL, 0, index);
}

//+------------------------------------------------------------------+
//| Função para calcular o pivô mais baixo                           |
//+------------------------------------------------------------------+
double GetLowestLow(int periodos) {
    int index = iLowest(NULL, 0, MODE_LOW, periodos, 0);
    return iLow(NULL, 0, index);
}

//+------------------------------------------------------------------+
//| Função para verificar quebra de estrutura (Break of Structure)    |
//+------------------------------------------------------------------+
bool IsBreakOfStructure(double high, double low) {
    double highestHigh = GetHighestHigh(LookBackBars);
    double lowestLow = GetLowestLow(LookBackBars);

    if (high > highestHigh) {
        isBullishBreaker = true;
        isBearishBreaker = false;
        return true;  // Quebra de alta (Bullish BOS)
    } 
    else if (low < lowestLow) {
        isBearishBreaker = true;
        isBullishBreaker = false;
        return true;  // Quebra de baixa (Bearish BOS)
    }
    return false;  // Sem quebra de estrutura
}

//+------------------------------------------------------------------+
//| Função para desenhar Breaker Block no gráfico                     |
//+------------------------------------------------------------------+
void DrawBreakerBlock(double top, double bottom, string name, color blockColor) {
    // Obtém o tempo da barra atual e da anterior
    datetime time1 = iTime(NULL, 0, 0);  // Tempo da barra atual (barra 0)
    datetime time2 = iTime(NULL, 0, 1);  // Tempo da barra anterior (barra 1)

    // Verifica se o objeto já existe
    if (ObjectFind(0, name) < 0) {
        // Cria o retângulo no gráfico
        ObjectCreate(0, name, OBJ_RECTANGLE, 0, time2, top, time1, bottom);
        ObjectSetInteger(0, name, OBJPROP_COLOR, blockColor);  // Define a cor do retângulo
        ObjectSetInteger(0, name, OBJPROP_WIDTH, 2);  // Define a largura da linha
        ObjectSetInteger(0, name, OBJPROP_STYLE, STYLE_SOLID);  // Define o estilo da linha
        ObjectSetInteger(0, name, OBJPROP_BACK, true);  // Desenha o objeto em segundo plano
    }
}

//+------------------------------------------------------------------+
//| Função OnTick                                                     |
//+------------------------------------------------------------------+
void OnTick() {
    // Calcula os pivôs mais recentes
    double currentHigh = GetHighestHigh(Periodos_Pivots);
    double currentLow = GetLowestLow(Periodos_Pivots);

    // Verifica se houve uma quebra de estrutura
    if (IsBreakOfStructure(currentHigh, currentLow)) {
        if (isBullishBreaker) {
            breakerBlockHigh = currentLow;
            breakerBlockLow = currentLow - BreakerBlockRange * pointSize;  // Usando pointSize para calcular o Breaker Block

            // Desenha o Breaker Block no gráfico
            DrawBreakerBlock(breakerBlockHigh, breakerBlockLow, "BullishBreakerBlock", clrGreen);
        } 
        else if (isBearishBreaker) {
            breakerBlockHigh = currentHigh + BreakerBlockRange * pointSize;  // Usando pointSize para calcular o Breaker Block
            breakerBlockLow = currentHigh;

            // Desenha o Breaker Block no gráfico
            DrawBreakerBlock(breakerBlockHigh, breakerBlockLow, "BearishBreakerBlock", clrRed);
        }
    }
}
